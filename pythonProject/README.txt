Задача: Разработка системы управления библиотекой

Описание
Необходимо разработать консольное приложение для управления библиотекой книг. Приложение должно позволять добавлять, удалять, искать и отображать книги. Каждая книга должна содержать следующие поля:
 • id (уникальный идентификатор, генерируется автоматически)
 • title (название книги)
 • author (автор книги)
 • year (год издания)
 • status (статус книги: “в наличии”, “выдана”)

Требования
 1 Добавление книги: Пользователь вводит title, author и year, после чего книга добавляется в библиотеку с уникальным id и статусом “в наличии”.
 2 Удаление книги: Пользователь вводит id книги, которую нужно удалить.
 3 Поиск книги: Пользователь может искать книги по title, author или year.
 4 Отображение всех книг: Приложение выводит список всех книг с их id, title, author, year и status.
 5 Изменение статуса книги: Пользователь вводит id книги и новый статус (“в наличии” или “выдана”).

Дополнительные требования
 • Реализовать хранение данных в текстовом или json формате.
 • Обеспечить корректную обработку ошибок (например, попытка удалить несуществующую книгу).
 • Написать функции для каждой операции (добавление, удаление, поиск, отображение, изменение статуса).
 • Не использовать сторонние библиотеки.


Отчет о выполненной работе.

Было написано консольное приложение для управления библиотекой книг в PyCharm без использования сторонних библиотек.
Для работы с приложением пользователю достаточно ввести команду (рядом прикреплены описания для удобств) которые в последующем выполняли свою функцию.
Перечень команд и их описаний:
1. add - Позволяет добавить новую книгу 
2. delete - Позволяет удалить книгу 
3. search - Команда для поиска книги, достаточно ввести одно из (id, писатель, название книги)
4. display - Выводит весь список книг
5. change - Команда для изменения статуса книги
6. exit - Завершение работы
Также чтобы приложение работало корректно была добавлена функция обязательного ввода данных. Приложение имеет файл json формата для хранения данных. Для удобства чтения кода были добавлены комментарии к блокам, которые описывать тот или оной процесс работы. По итогам ручного тестирования ошибок и недочетов не было выявлено.

